name: "Version Bumper"
description: "Bumps semantic version based on PR labels and increments build number."

inputs:
  github_token:
    description: "GitHub Token"
    required: true
  pat_token:
    description: "Personal Access Token"
    required: true
  version_file:
    description: "Path to pubspec file"
    required: true
  branch:
    description: "Branch to commit to"
    required: true

outputs:
  new_version:
    description: "New semantic version generated"
    value: ${{ steps.version.outputs.new_version }}
  new_tag_version:
    description: "New tag version generated"
    value: ${{ steps.version.outputs.new_tag_version }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        token: ${{ inputs.pat_token }}

    - name: Install GitHub CLI (gh)
      shell: bash
      run: |
        (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
          && sudo mkdir -p -m 755 /etc/apt/keyrings \
          && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
          && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
          && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

    - name: Get Version from Latest Tag
      id: get_latest_tag
      shell: bash
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag -l 'v*.*.*' --sort=-version:refname | head -n1)
        LATEST_TAG=${LATEST_TAG:-v0.0.0+0}
        echo "LATEST_TAG=$LATEST_TAG" >> "$GITHUB_ENV"

        SEMVER=$(echo "${LATEST_TAG#v}" | sed 's/^v*//')
        SEMVER=${SEMVER%%-RC*}

        echo "CURRENT_VERSION=$SEMVER" >> "$GITHUB_ENV"

    - name: Run version bump logic
      id: version
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        VERSION_FILE: ${{ inputs.version_file }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_BASE_REF: ${{ github.base_ref }}
        GITHUB_HEAD_REF: ${{ github.head_ref }}
        SEMVER: ${{ env.CURRENT_VERSION }}
      run: |
        set -e

        MAJOR=$(echo "$SEMVER" | cut -d '.' -f 1)
        MINOR=$(echo "$SEMVER" | cut -d '.' -f 2)
        PATCH=$(echo "$SEMVER" | cut -d '.' -f 3 | cut -d '+' -f 1)
        BUILD=$(echo "$SEMVER" | grep '+' | cut -d '+' -f 2)
        BUILD=${BUILD:-1}

        LABELS=""
        if [ -n "$PR_NUMBER" ]; then
          LABELS=$(gh pr view "$PR_NUMBER" --json labels -q '.labels[].name')
        fi

        BUMP_TYPE=$(echo "$LABELS" | grep -oiE "major|minor|patch" | head -n1 || echo "")
        BUMP_TYPE=${BUMP_TYPE,,} # Convert to lowercase
        [ -z "$BUMP_TYPE" ] && echo "Incrementing build number only."

        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
          *)
            echo "Build number will increment only."
            ;;
        esac

        if ! echo "$LABELS" | grep -qi "no-build"; then
          BUILD=$((BUILD + 1))
        else
          echo "Label 'no-build' detected. Skipping build number increment."
        fi

        NEW_SEMVER="$MAJOR.$MINOR.$PATCH"
        NEW_VERSION="${NEW_SEMVER}+${BUILD}"

        echo "NEW_SEMVER=$NEW_SEMVER" >> "$GITHUB_ENV"
        echo "BUILD=$BUILD" >> "$GITHUB_ENV"

    - name: Determine Tag Versioning
      id: tag_version
      shell: bash
      env:
        GITHUB_BASE_REF: ${{ github.base_ref }}
        GITHUB_HEAD_REF: ${{ github.head_ref }}
        NEW_SEMVER: ${{ env.NEW_SEMVER }}
        BUILD: ${{ env.BUILD }}
      run: |
        set -e

        if [[ "$GITHUB_BASE_REF" == "main" ]]; then
          NEW_VERSION="${NEW_SEMVER}+${BUILD}"
          TAG_VERSION="v${NEW_SEMVER}"
          echo "Tagging for Prod: $TAG_VERSION"

        elif [[ "$GITHUB_BASE_REF" == "staging" ]]; then
          NEW_VERSION="${NEW_SEMVER}+${BUILD}"
          TAG_VERSION="v${NEW_SEMVER}-RC+${BUILD}"
          echo "Tagging as RC: $TAG_VERSION"

        else
          NEW_VERSION="${NEW_SEMVER}+${BUILD}"
          TAG_VERSION="v${NEW_SEMVER}+${BUILD}"
          echo "Regular version bump: $TAG_VERSION"
        fi

        echo "new_version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
        echo "new_version=${NEW_VERSION}"
        echo "new_tag_version=${TAG_VERSION}" >> "$GITHUB_OUTPUT"
        echo "new_tag_version=${TAG_VERSION}"
